# Virtual Host configuration for radiodns.uk

# Redirect HTTP to HTTPS
server {
  listen [2a00:1098:8:68::153]:80;

  server_name radiodns.uk redirect.radiodns.uk www.radiodns.uk origin.radiodns.uk;

  root /srv/www/empty;

  # Let's Encrypt challenge response
  location ^~ /.well-known/acme-challenge {
    alias /var/lib/dehydrated/acme-challenges;
  }

  # Set redirects to expire in 1 year
  location / {
    add_header Cache-Control "public, max-age=31536000";
    return 301 https://www.radiodns.uk$request_uri;
  }
}

# Redirect apex to www
server {
  listen [2a00:1098:8:68::153]:443 ssl;

  server_name radiodns.uk redirect.radiodns.uk;

  root /srv/www/empty;

  ssl_certificate /var/lib/dehydrated/certs/redirect.radiodns.uk/fullchain.pem;
  ssl_certificate_key /var/lib/dehydrated/certs/redirect.radiodns.uk/privkey.pem;
  include /etc/nginx/conf.d/modern-ssl.inc;

  # Set redirects to expire in 1 year
  location / {
    add_header Cache-Control "public, max-age=31536000";
    return 301 https://www.radiodns.uk$request_uri;
  }
}

server {
  listen [2a00:1098:8:68::153]:443 ssl;

  server_name www.radiodns.uk origin.radiodns.uk;

  root /srv/www/empty;

  ssl_certificate /var/lib/dehydrated/certs/origin.radiodns.uk/fullchain.pem;
  ssl_certificate_key /var/lib/dehydrated/certs/origin.radiodns.uk/privkey.pem;
  include /etc/nginx/conf.d/modern-ssl.inc;

  # Original request was over HTTP, redirect to HTTPS
  if ($http_x_forwarded_proto = 'http') {
    return 301 https://www.radiodns.uk$request_uri;
  }

  try_files $uri @ruby_app;
  location @ruby_app {
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    proxy_pass http://localhost:8153;
  }
}
